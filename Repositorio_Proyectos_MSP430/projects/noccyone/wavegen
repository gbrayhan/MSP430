#!/usr/bin/php
<?php require('lepton-ng');

class WaveGenApp extends ConsoleApplication {

	protected $verbose = false;
	protected $bits = 8;
	protected $wave = null;
	protected $standalone = false;
	protected $output = null;
	protected $rate = 100;
	protected $arguments = array(
		array('s','sine','Generate sine wave','wave','sine'),
		array('r:','raw','Raw sample conversion','wave','raw'),
		array('a','8bit','8 bit operation (for parallel DAC)','bits',8),
		array('b','16bit','16 bit operation (for serial DAC)','bits',16),
		array('o:','output','Output file','output'),
		array('r:','rate','The sample rate in hz','samplerate'),
		array('e','','Wrap in ifdef statement','standalone'),
		array('h','help','Show this help'),
		array('v','verbose','Verbose operation','verbose'),
	);
	protected $outbuffer = '';
	
	function main($argc,$argv) {
		
		if (!$this->wave) {
			$this->usage();
			return 1;
		}

		$this->standalone = $this->hasArgument('e');
		if ($this->hasArgument('r')) $this->rate = $this->getArgument('r');
		
		if ($this->standalone) {
			if ($this->output) {
				$hdrname = '__'.str_replace('.','_',strToUpper(basename($this->output))).'__';
			} else {
				$hdrname = '__SINEWAVE_SAMPLE_SET__';
			}
			$this->outbuffer .= sprintf("#ifndef %s\n", $hdrname);
			$this->outbuffer .= sprintf("#define %s\n", $hdrname);
		}
		
		switch($this->wave) {
			case 'sine':
				$this->make_sine();
				break;
			case 'raw':
				break;
		}
		
		if ($this->standalone) {
			$this->outbuffer .= sprintf("#endif // %s\n", $hdrname);
		}
		if ($this->output) {
			file_put_contents($this->output,$this->outbuffer);
			printf("Saved %s.\n", $this->output);
		} else {
			printf("%s", $this->outbuffer);
		}
		
	}

	function make_sine() {


		if ($this->bits == 16) {
			$scale = 32000;
		} else {
			$scale = 128;
		}

		$samples = $this->rate;

		$ratio = (PI * 2) / $samples;
		$i = 0;
		$this->outbuffer .= sprintf("/**\n");
		$this->outbuffer .= sprintf(" * Sine wave generated by wavegen.\n");
		$this->outbuffer .= sprintf(" * For the noccyONE project at noccylabs.info\n");
		$this->outbuffer .= sprintf(" *\n");
		$this->outbuffer .= sprintf(" * Bits: %d, SampleRate: %d\n", $this->bits, $this->rate);
		$this->outbuffer .= sprintf(" */\n");
		$this->outbuffer .= sprintf("const int sd_sine_size = %d;\n", $samples);
		$this->outbuffer .= sprintf("const int sd_sine_bits = %d;\n", $this->bits);
		$this->outbuffer .= sprintf("const char sd_sine[] = {");
		for ($n = 0; $n < $samples; $n++) {
			if ($i == 0) $this->outbuffer .= sprintf("\n    ");
			$this->outbuffer .= sprintf("%d", (sin($n * $ratio)*$scale));
			if ($n < $samples - 1) $this->outbuffer .= sprintf(", ");
			$i++; if ($i>10) $i = 0;
		}
		$this->outbuffer .= sprintf("\n}\n");

	}

}

lepton::run('wavegenapp');
