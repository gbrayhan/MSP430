;******************************************************************************
;  MSP430F21x2 Demo - Timer0_A3, Toggle P1.0-3, Cont. Mode ISR, 32kHz ACLK
;
;  Description: Use Timer0_A3 CCRx units and overflow to generate four
;  independent timing intervals. For demonstration, TA0CCR0, TA0CCR1 and TA0CCR2
;  output units are optionally selected with port pins P1.1, P1.2 and P1.3
;  in toggle mode. As such, these pins will toggle when respective TA0CCRx
;  registers match the TA0R counter. Interrupts are also enabled with all
;  TA0CCRx units, software loads offset to next interval only - as long as the
;  interval offset is added to TA0CCRx, toggle rate is generated in hardware.
;  Timer0_A1 overflow ISR is used to toggle P1.0 with software. Proper use
;  of the TA0IV interrupt vector generator is demonstrated.
;  ACLK = TACLK = 32kHz, MCLK = SMCLK = default DCO ~1.2MHz
;  ;* An external watch crystal on XIN XOUT is required for ACLK *;
;
;  As coded and with TA0CLK = 32768Hz, toggle rates are:
;  P1.1 = TA0CCR0 = 32768/(2*4) = 4096Hz
;  P1.2 = TA0CCR1 = 32768/(2*16) = 1024Hz
;  P1.3 = TA0CCR2 = 32768/(2*100) = 163.84Hz
;  P1.0 = overflow = 32768/(2*65536) = 0.25Hz
;
;              MSP430F21x2
;            -----------------
;        /|\|              XIN|-
;         | |                 | 32kHz
;         --|RST          XOUT|-
;           |                 |
;           |         P1.1/TA0|--> TA0CCR0
;           |         P1.2/TA1|--> TACCR1
;           |         P1.3/TA2|--> TACCR2
;           |             P1.0|--> Overflow/software
;
;  A. Dannenberg
;  Texas Instruments Inc.
;  January 2008
;  Built with IAR Embedded Workbench Version: 3.41A
;******************************************************************************
#include "msp430x21x2.h"
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT
SetupP1     bis.b   #00Eh,&P1SEL            ; P1.1 - P1.3 option select
            bis.b   #00Fh,&P1DIR            ; P1.0-3 outputs
SetupC0     mov.w   #OUTMOD_4 +CCIE,&TA0CCTL0; TACCR0 toggle, interrupt enabled
SetupC1     mov.w   #OUTMOD_4 +CCIE,&TA0CCTL1; TACCR1 toggle, interrupt enabled
SetupC2     mov.w   #OUTMOD_4 +CCIE,&TA0CCTL2; TACCR2 toggle, interrupt enabled
SetupTA     mov.w   #TASSEL_1+MC_2+TAIE,&TA0CTL   ; ACLK, contmode, interrupt
                                            ;
Mainloop    bis.w   #LPM3+GIE,SR            ; Enter LPM3, interrupts enabled
            nop                             ; Required for debug
                                            ;
;-------------------------------------------------------------------------------
TA0_ISR;
;-------------------------------------------------------------------------------
            add.w   #4,&TA0CCR0             ; Offset until next interrupt
            reti                            ;
                                            ;
;-------------------------------------------------------------------------------
TAX_ISR;    Common ISR for TA0CCR1-2 and overflow
;-------------------------------------------------------------------------------
            add.w   &TAIV,PC                ; Add Timer_A offset vector
            reti                            ;
            jmp     TA0CCR1_ISR             ; TACCR1
            jmp     TA0CCR2_ISR             ; TACCR1
            reti                            ;
            reti                            ;
TA_over     xor.b   #001h,&P1OUT            ; Toggle P1.0
            reti                            ; Return from overflow ISR
                                            ;
TA0CCR1_ISR  add.w   #16,&TA0CCR1            ; Offset until next interrupt
            reti                            ; Return ISR
                                            ;
TA0CCR2_ISR  add.w   #100,&TA0CCR2           ; Offset until next interrupt
            reti                            ; Return ISR
                                            ;
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; MSP430 RESET Vector
            DW      RESET                   ;
            ORG     TIMER0_A0_VECTOR        ; Timer_A0 Vector
            DW      TA0_ISR                 ;
            ORG     TIMER0_A1_VECTOR        ; Timer_AX Vector
            DW      TAX_ISR                 ;
            END
