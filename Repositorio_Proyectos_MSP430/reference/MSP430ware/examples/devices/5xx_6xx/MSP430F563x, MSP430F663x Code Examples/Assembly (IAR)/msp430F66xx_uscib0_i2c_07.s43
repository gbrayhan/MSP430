;*******************************************************************************
;  MSP430F66xx Demo - USCI_B0 I2C Slave RX single bytes from MSP430 Master
;
;  Description: This demo connects two MSP430's via the I2C bus. The master
;  transmits to the slave. This is the SLAVE code. The interrupt driven
;  data receiption is demonstrated using the USCI_B0 RX interrupt.
;  ACLK = n/a, MCLK = SMCLK = default DCO = ~1.045MHz
;
;                                /|\  /|\
;                MSP430F6638    10k  10k     MSP430F6638
;                   slave         |    |         master
;             -----------------   |    |   -----------------
;           -|XIN  P2.0/UCB0SDA|<-|----+->|P2.0/UCB0SDA  XIN|-
;            |                 |  |       |                 |
;           -|XOUT             |  |       |             XOUT|-
;            |     P2.1/UCB0SCL|<-+------>|P2.1/UCB0SCL     |
;            |                 |          |                 |
;
;   Priya Thanigai
;   Texas Instruments Inc.
;   March 2010
;   Built with IAR Embedded Workbench Version: 4.20
;******************************************************************************

#include <msp430f6638.h>

#define      RXData      R5

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------

RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
            mov.w   #WDTPW + WDTHOLD,&WDTCTL; Stop WDT

            calla   #Port_Mapping           ; Assign pins to I2C lines
            bis.b   #03h,&P2SEL
            bis.b   #03h,&P2DIR

            bis.b   #UCSWRST,&UCB0CTL1      ; **Put state machine in reset**
            mov.b   #UCMODE_3 + UCSYNC,UCB0CTL0; I2C Slave, synchronous mode
            mov.w   #0x48,&UCB0I2COA        ; Own Address is 048h
            bic.b   #UCSWRST,&UCB0CTL1      ; **Initialize USCI state machine**
            bis.b   #UCRXIE,&UCB0IE         ; Enable RX interrupt

Mainloop    bis.b   #LPM0 + GIE,SR          ; Enter LPM0, enable interrupts
            nop                             ; Set breakpoint >>here<< and read
            jmp     Mainloop                ; RXData

;-------------------------------------------------------------------------------
; The Port_Mapping function maps UCB0SDA to P2.0 and UCB0SCL to P2.1
; The SDA and SCL lines can be mapped onto any Port 2 pin
;-------------------------------------------------------------------------------
Port_Mapping
       
            mov.w   #02D52h,&PMAPPWD        ; Write PWD to PMAP register
            mov.b   #PM_UCB0SDA,&P2MAP0     ; Map UCB0SDA to P2.0
            mov.b   #PM_UCB0SCL,&P2MAP1     ; Map UCB0SCL to P2.1
            clr.w   &PMAPPWD
            reta                                            ;
;-------------------------------------------------------------------------------
USCI_B0_ISR;        USCI_B0 Interrupt Handler ISR
;-------------------------------------------------------------------------------
            add.w   &UCB0IV,PC              ; Add offset to PC
            reti                            ; Vector 0: No interrupt
            reti                            ; Vector 2: ALIFG
            reti                            ; Vector 4: NACKIFG
            reti                            ; Vector 6: STTIFG
            reti                            ; Vector 8: STPIFG
            jmp     RXIFG_ISR               ; Vector 10: RXIFG
            reti                            ; Vector 12: TXIFG
                                            ;
RXIFG_ISR                                   ; RXIFG Interrupt Handler
            mov.b   &UCB0RXBUF,RXData       ; Get RX data
            bic.b   #LPM0,0(SP)             ; Exit LPM0
            reti                            ;
                                            ;
;-------------------------------------------------------------------------------
                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     USCI_B0_VECTOR              ; USCI_BO Interrupt Vector
            DW      USCI_B0_ISR
            ORG     RESET_VECTOR                ; POR, ext. Reset
            DW      RESET
            END
