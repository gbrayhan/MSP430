;******************************************************************************
;   MSP430F54x Demo - USCI_A0, SPI 3-Wire Master Incremented Data
;
;   Description: SPI master talks to SPI slave using 3-wire mode. Incrementing
;   data is sent by the master starting at 0x01. Received data is expected to
;   be same as the previous transmission TXData = RXData-1.  
;   USCI RX ISR is used to handle communication with the CPU, normally in LPM0. 
;   ACLK = ~32.768kHz, MCLK = SMCLK = DCO ~1MHz.  BRCLK = ACLK/2
;
;
;                   MSP430FR5739
;                 -----------------
;             /|\|                 |
;              | |                 |
;              --|RST              |
;                |                 |
;                |             P2.0|-> Data Out (UCA0SIMO)
;                |                 |
;                |             P2.1|<- Data In (UCA0SOMI)
;                |                 |
;                |             P1.5|-> Serial Clock Out (UCA0CLK)
;
;
;   Tyler Witt
;   Texas Instruments Inc.
;   September 2011
;   Built with IAR Embedded Workbench v6.0
;******************************************************************************
#include "msp430fr5739.h"
#define  RXData   R5
#define  TXData   R6
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
            mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT
	    bis.b   #BIT0,&P1DIR
	    bic.b   #BIT0,&P1OUT
	    clr.w   RXData		    ; Initialize RXData
			
	    bis.w   #BIT4+BIT5,&PJSEL0
	    mov.b   #0xA5,&CSCTL0_H
	    bis.w   #DCOFSEL0+DCOFSEL1,&CSCTL1 ; Set max DCO setting
	    mov.w   #SELA_0+SELS_3+SELM_3,&CSCTL2 ; ACLK = XT1; MCLK = DCO
	    mov.w   #DIVA_0+DIVS_3+DIVM_3,&CSCTL3 ; set all dividers
	    bis.w   #XT1DRIVE_0,&CSCTL4
	    bic.w   #XT1OFF,&CSCTL4
OSCFlag	    bic.w   #XT1OFFG,&CSCTL5	    ; Clear XT1 fault flag
	    bic.w   #OFIFG,&SFRIFG1
	    cmp.w   #001h,&OFIFG	    ; Test oscillator fault flag
	    jz	    OSCFlag
			
	    bis.b   #BIT5,&P1SEL1
	    bis.b   #BIT0+BIT1,&P2SEL1
	    bis.w   #UCSWRST,&UCA0CTLW0	    ; **Put state machine in reset**
	    bis.w   #UCMST+UCSYNC+UCCKPL+UCMSB,&UCA0CTLW0 ; 3-pin, 8-bit SPI master
						          ; Clock polarity high, MSB
	    bis.w   #UCSSEL_1,&UCA0CTLW0    ; ACLK
	    mov.b   #0x02,&UCA0BR0	    ; /2
	    clr.b   &UCA0BR1
	    clr.w   &UCA0MCTLW		    ; No modulation
	    bic.w   #UCSWRST,&UCA0CTLW0	    ; **Initialize USCI state machine**
	    bis.w   #UCRXIE,&UCA0IE	    ; Enable USCI_A0 RX interrupt
	    mov.w   #0x01,TXData	    ; Holds TX data
			
Mainloop    bis.w   #UCTXIE,&UCA0IE
	    bis.w   #LPM0+GIE,SR	    ; Enter LPM0 w/ interrupt
	    nop				    ; remain in LPM0
	    mov.w   #1000,R15		    ; Delay before next transmission
Delay	    dec.w   R15
	    jnz	    Delay
	    inc.w   TXData		    ; increment transmit data
	    jmp     Mainloop
	    nop				    ; for debug
			
;------------------------------------------------------------------------------
USCI_ISR ;	USCI Interrupt Service Routine
;------------------------------------------------------------------------------
	    add	    &UCA0IV,PC		    ; Add offset to PC
	    reti	                    ; no interrupt
	    jmp     Receive		    ; receive interrupt
	    jmp	    Transmit		    ; transmit interrupt
Receive	    mov.w   &UCA0RXBUF,RXData
	    bic.w   #UCRXIFG,&UCA0IFG
	    bic.w   #LPM0,0(SP)             ; Wake up to setup next TX
	    reti
Transmit    mov.w   TXData,&UCA0TXBUF
	    bic.w   #UCTXIE,&UCA0IE
	    reti
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; POR, ext. Reset
            DW      RESET
            ORG     USCI_A0_VECTOR          ; USCI A0 Vector
            DW      USCI_ISR
            END
