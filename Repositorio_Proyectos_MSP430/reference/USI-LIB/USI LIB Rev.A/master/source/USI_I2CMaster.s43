;******************************************************************************
;  MSP430F20xx - I2C Master Transmitter and Receiver
;
;  Description: This code library configures the MSP430 as an I2C master device
;  capable of transmitting and receiving bytes. 
;
;  ***THIS IS THE MASTER CODE***
;
;                    Master                   
;               MSP430F20x2/3             
;             -----------------          
;         /|\|              XIN|-   
;          | |                 |     
;          --|RST          XOUT|-    
;            |                 |        
;            |                 |        
;            |                 |       
;            |         SDA/P1.7|------->
;            |         SCL/P1.6|------->
;
;  Note: Internal pull-ups are used for SDA & SCL
;
;  P. Thanigai
;  Texas Instruments Inc.
;  August 2007
;  Built with IAR Embedded Workbench Version: 3.42A
;******************************************************************************
#include  <msp430x20x2.h>
; 
; Note:
; The USE_C_CONTEXT_SAVE macro is used when C functions are called from the
; library. The macro preserves registers R13 - R15 which may be corrupted
; during a C function call. If the called function is in assembler the 
; macro need not be used.
;# define USE_C_CONTEXT_SAVE 

            MODULE    TI_USI_I2C_MASTER
            RTMODEL   "__rt_version", "2"   ; Ensure correct runtime model
            ;Functions
            PUBLIC    TI_USI_I2C_MasterInit
            PUBLIC    TI_USI_I2CSelect
            PUBLIC    TI_USI_I2CRead
            PUBLIC    TI_USI_I2CWrite
            PUBLIC    TI_USI_I2CStop

            RSEG      DATA16_N
            EVEN
TI_I2CState   DS      2
TI_FuncPtr    DS      2
TI_TxPtr      DS      2
TI_RxPtr      DS      2
TI_SlavAdd    DS      1
TI_ByteCtr    DS      1
TI_TxWordCtr  DS      1
TI_AckPoll    DS      1
TI_StopBit    DS      1
TI_GenStop    DS      1
TI_AckResult  DS      1

            RSEG    CODE                    ; Assemble to Flash memory
            EVEN
;==============================================================================
; Initialize USI module
;==============================================================================
; void TI_USI_I2C_MasterInit(unsigned char ClockConfig, 
; int(*StatusCallback)(unsigned char))
;
; Function to initialize the USI module in Master mode and enable I2C
; communication. The clock configuration is passed as an argument.
;
; IN:      R12     Clock configuration  USIDIV_x+USISSEL_x+USICKPL
;          R14     Callback function pointer
;------------------------------------------------------------------------------
TI_USI_I2C_MasterInit
            bis.b   #0xC0,&P1OUT
            bis.b   #0xC0,&P1REN            ; Internal pullups enable
SetupUSI    mov.b   R12,&USICKCTL           ; Initialize clock config
            mov.b   #USIPE6+USIPE7+USIMST+USISWRST,&USICTL0; Port, I2C master
            mov.b   #USIIE+USII2C,&USICTL1  ; Enable I2C & USI interrupt
            mov.b   #USIIFGCC,&USICNT       ; Disable automatic clear control
            bic.b   #USISWRST,&USICTL0      ; Enable USI
            bic.b   #USIIFG,&USICTL1        ; Clear pending flag
            mov.w   R14,&TI_FuncPtr         ; Initialize callback fn. pointer
            ret

;------------------------------------------------------------------------------
; void TI_USI_I2CStop(void)
;
; The function is used to end an open transaction by generating a stop condition
;
;------------------------------------------------------------------------------
TI_USI_I2CStop
            clr.b   &TI_AckPoll             ; Do not poll
            clr.b   &TI_StopBit             ; Do not exit w/o stop
            mov.b   #1,&TI_GenStop          ; Generate stop bit
            jmp     BlockingMode

;------------------------------------------------------------------------------
; unsigned char TI_USI_I2CSelect(unsigned char SlaveAddress)
;
; Function is used to check the presence of a slave and polls for an acknowledge
; from the slave
;
;  IN:      R12    Slave Address
;  OUT:     R12    Result of operation - ack/nack
;
;------------------------------------------------------------------------------
            
TI_USI_I2CSelect  
            clr.b   &TI_StopBit             ; Do not exit w/o stop
            clr.b   &TI_GenStop
            clr.w   &TI_I2CState            ; Initialize state machine
            rla.b   R12                     ; Slave address << 1
            mov.b   R12,&TI_SlavAdd         ; Initialize slave address
            mov.b   #1,TI_AckPoll           ; Set acknowledge poll bit
            jmp     BlockingMode                         
; -----------------------------------------------------------------------------
; unsigned char TI_USI_I2CRead(unsigned char SlaveAddress, unsigned int Length,
; unsigned char Multi, unsigned char* RxData)
; 
; Function implements block read master reciever functionality
;
;  IN:     R12      Slave Address
;          R14      Length of transaction / no. of bytes 
;          SP 1     Stop condition bit
;          SP 2     Pointer to store received data (RAM)
;  OUT:    R12      Result of operation (Blocking mode only)
;------------------------------------------------------------------------------
TI_USI_I2CRead
            clr.b   &TI_AckPoll             ; Do not poll
            clr.b   &TI_GenStop
            mov.b   2(SP),&TI_StopBit       ; Stop condn bit initialize
            mov.w   4(SP),&TI_RxPtr         ; Transmit buffer initialize
            clr.w   &TI_I2CState            ; Initialize state machine
            rla.b   R12                     ; Left shift SA + 1 = Read fn.
            inc.b   R12
            mov.b   R12,&TI_SlavAdd         ; Slave address initialize
            mov.b   R14,&TI_ByteCtr         ; Save no. of bytes to rx ptr
            jmp     Mainloop
; -----------------------------------------------------------------------------
; unsigned char TI_USI_I2CWrite(unsigned char SlaveAddress, unsigned int Length,
; unsigned char Multi, unsigned char* TxData)
; 
; Function implements block byte write master transmitter functionality
;
;  IN:     R12      Slave Address
;          R14      Length of transaction / no. of bytes
;          SP 1     Stop condition bit
;          SP 2     Pointer to transmit data (RAM)
;  OUT:    R12      Result of operation (Blocking mode only)
;------------------------------------------------------------------------------
TI_USI_I2CWrite 
            clr.b   &TI_AckPoll             ; Do not poll
            clr.b   &TI_GenStop
            mov.b   2(SP),&TI_StopBit       ; Stop condn bit initialize 
            mov.w   4(SP),&TI_TxPtr         ; Transmit buffer initialize
            clr.w   &TI_I2CState            ; Initialize state machine
            rla.b   R12                     ; Left shift + 0 = Write fn.
            mov.b   R12,&TI_SlavAdd         ; Slave address initialize
            mov.b   R14,&TI_ByteCtr         ; Initialize tx counter
Mainloop    
            cmp.w   #0,&TI_FuncPtr          ; chk if callback fn pointer exists
            jz      BlockingMode            
            bis.b   #USIIFG,&USICTL1        ; If yes - return to appln. level
            clr.w   R12                     ; Return value is undefined
            ret

BlockingMode
            dint
            bis.b   #USIIFG,&USICTL1        ; Blocking fashion, stay in library
            bis.w   #LPM0+GIE,SR            ; Enter LPM0, enable interrupts
exitloop    ret

;------------------------------------------------------------------------------
USI_ISR;
;------------------------------------------------------------------------------
;Control flow 
;Data Transmit : state 0 -> 2 -> 4 -> 10 -> 12 -> 14
;Data Recieve  : state 0 -> 2 -> 4 -> 6 -> 8 -> 14

;------------------------------------------------------------------------------
            add.w   &TI_I2CState,PC         ; I2C State Machine
            jmp     STATE0
            jmp     STATE2
            jmp     STATE4
            jmp     STATE6
            jmp     STATE8
            jmp     STATE10
            jmp     STATE12
            jmp     STATE14
            
STATE0                                      ; Send out slave address
            cmp.b   #1,&TI_GenStop          ; Generate stop condn?
            jz      Generatestop
            clr.b   &TI_AckResult           ; Clear result of previous oprn.
            clr.b   &USISRL                 ; Generate start condition
            bis.b   #USIGE+USIOE,&USICTL0   ;
            bic.b   #USIGE,&USICTL0         ;
            mov.b   &TI_SlavAdd,&USISRL     ; and transmit address R/W =1
            bis.b   #8,&USICNT              ; bit counter = 8
            mov.w   #2,&TI_I2CState         ; goto next state rx address (N)ACK
            bic.b   #USIIFG,&USICTL1
            reti
Generatestop
            clr.b   &TI_GenStop             ; Clear generate-stop bit
            clr.b   &USISRL                 ; Pre-stop
            jmp     Prestop
STATE2    ; rx slave address acknowledge      
            bic.b   #USIOE,&USICTL0         ; SDA = input
            bis.b   #1,&USICNT              ; Bit counter = 1, rx (N)ACK 
            mov.w   #4,&TI_I2CState         ; Goto next state, chk (N)ACK
            bic.b   #USIIFG,&USICTL1
            reti
STATE4  ; chk address ack and do one of three options - exit loop,tx data,rxdata
            cmp.b   #1,TI_AckPoll           ; ack poll? only for slave select fn
            jz      chkackpoll
            bit.b   #0x01,&USISRL           ; did slave ack? usisrl = 0?
            jnc     Loopchk                 ; ACK received, go to Tx/Rx
            mov.b   #1,&TI_AckResult        ; Slave did not respond
            clr.b   &USISRL
            jmp     Prestop                 ; generate prestop

Loopchk     clr.b   &TI_AckResult 
            bit.b   #1,&TI_SlavAdd          ; Chk last bit for R/W 
            jnz     Data_Rx                 ; if R/w = 1
            jmp     Data_Tx                 ; if R/w = 0
chkackpoll           
            mov.b   #1,&TI_AckResult        ; Ack result = 1
            bit.b   #0x01,&USISRL           ; if nack rxed go to pre-stop
            jnz     test_nack
            clr.b   &TI_AckResult           ; Slave ack recieved, store result
test_nack   
            clr.b   &USISRL
            jmp     Prestop                 ; generate prestop
Data_Rx
            bic.b   #USIOE,&USICTL0         ; SDA = input
            bis.b   #8,&USICNT              ; bit counter = 8, Rx data
            mov.w   #6,&TI_I2CState         ; goto next state: Send (N)ACK
            bic.b   #USIIFG,&USICTL1 
            reti          
Data_Tx   
            push.w  R6
            bis.b   #USIOE,&USICTL0         ; SDA = output 
            mov.w   &TI_TxPtr,R6            ; Pointer to tx data
            mov.b   @R6,&USISRL
            bis.b   #8,&USICNT              ; bit counter = 8, Tx data
            mov.w   #10,&TI_I2CState        ; Go to next state: Receive (N)ACK
            bic.b   #USIIFG,&USICTL1 
            pop.w   R6
            reti

STATE6 ;Data received, move to buffer and transmit ack (nack if last byte)
            push.w  R6
            mov.w   &TI_RxPtr,R6            ; Pointer to received data
            mov.b   &USISRL,0(R6)
            inc.w   &TI_RxPtr               ; Increment pointer for next rx
            pop.w   R6
            cmp.b   #1,&TI_ByteCtr          ; Last byte? 
            jz      data_NACK               ; If yes send Nack to slave
            bis.b   #USIOE,&USICTL0         ; SDA = output
            clr.b   &USISRL                 ; If no send ACK
            jmp     STATE6_Exit
data_NACK
            mov.b   #0xFF,&USISRL           ; Send NACK
STATE6_Exit
            bis.b   #1,&USICNT              ; Bit counter = 1, send NACK bit
            mov.w   #8,&TI_I2CState         ; goto next state, pre-stop
            bic.b   #USIIFG,&USICTL1 
            reti
STATE8  ; Pre-stop condition for Rx, loop back if ctr!=0
            dec.b   &TI_ByteCtr             ; Decrement rx counter
            cmp.b   #0,&TI_ByteCtr          ; More bytes to receive?
            jnz     Data_Rx
            mov.b   #0xFF,&USISRL           ; If no, go to prestop
            cmp.b   #0,&TI_StopBit          ; if user requested "no stop" condn.
            jnz     Prestop                 ; branch to exit w/o stop condition
            clr.b   &USISRL
Prestop
            bis.b   #USIOE,&USICTL0         ; SDA =output
            bis.b   #1,&USICNT              ; Bit counter = 1, SCL high, SDA low
            mov.w   #14,&TI_I2CState        ; goto next state, generate stop
            bic.b   #USIIFG,&USICTL1 
            reti

STATE10   ; Data transmitted, get ready to rx ack/nack byte from slave
            bic.b   #USIOE,&USICTL0         ; SDA = input
            bis.b   #1,&USICNT              ; Bit counter = 1, rx (N)Ack bit
            mov.w   #12,&TI_I2CState        ; Goto next state: check (N)Ack
            bic.b   #USIIFG,&USICTL1 
            reti 

STATE12   ;Check if slave (N)acked
;Pre-stop condition for Tx, generate stop condition if ctr = 0 else loop back
            bit.b   #0x01,&USISRL           ; Process data (N)Ack bit
            jz      Data_Ack                ; if ACK received  
            mov.b   #1,&TI_AckResult        ; Nack, result of oprn. = 1
            clr.b   &USISRL                 ; 
            jmp     Prestop                 ; generate prestop
Data_Ack
            clr.b   &TI_AckResult           ; Ack, result of oprn. = 0
            inc.w   &TI_TxPtr               ; Increment tx pointer
            dec.b   &TI_ByteCtr             ; Dec byte counter
            cmp.b   #0,&TI_ByteCtr          ; More bytes to transmit?
            jnz     Data_Tx
            mov.b   #0xFF,&USISRL           ; Last byte, go to prestop
            cmp.b   #0,&TI_StopBit          ; if user requested "no stop" condn.
            jnz     Prestop                 ; branch to exit w/o stop condition
            clr.b   &USISRL 
            jmp     Prestop

STATE14 ;common stop condition for Tx/Rx
            mov.b   #0xFF,&USISRL           ; USISRL=1 to release SDA
            bis.b   #USIGE,&USICTL0         ; Transparent latch enabled
            bic.b   #USIGE+USIOE,&USICTL0   ; Latch/SDA output disabled
            mov.w   #0,&TI_I2CState         ; Reset state machine for next oprn.
            bic.b   #USIIFG,&USICTL1
            cmp.b   #1,&TI_AckPoll          ; If I2C_Select, exit w/o callback
            jz      LPMSelect
            cmp.b   #1,&TI_GenStop          ; If I2C_Stop, exit w/o callback
            jz      LPMSelect
Stop        cmp.w   #0,&TI_FuncPtr          ; chk for callbackfn
            jz      LPMSelect               ; no callback, exit active
            push.w   R12                    ; save registers used in callback
#ifdef USE_C_CONTEXT_SAVE 
            push.w   R13
            push.w   R14
            push.w   R15
#endif
            mov.b   &TI_AckResult,R12       ; Result of oprn. to Callback fn.
            call    &TI_FuncPtr
            cmp.w   #1,R12                  ; Did user set/clear LPMbit?
#ifdef USE_C_CONTEXT_SAVE 
            pop.w   R15
            pop.w   R14
            pop.w   R13
#endif
            pop.w   R12                     ; restore register used in callback
            jnz     exitISR                 ; stay in LPM   
LPMSelect   
            mov.b   &TI_AckResult,R12 
            bic.w   #LPM4,0(SP)             ; Exit active for next transfer
exitISR    
            reti
;------------------------------------------------------------------------------
; Interrupt Vectors
;------------------------------------------------------------------------------
            COMMON  INTVEC
            ORG     USI_VECTOR              ; USI interrupt
            DW      USI_ISR                 ;
            END

